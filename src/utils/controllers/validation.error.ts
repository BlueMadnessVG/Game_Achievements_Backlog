import type { TypeWithKey } from "../../models/typeWithKey.model";

const codeMatcher: TypeWithKey<string> = {
    ERR_NETWORK: "ERROR GETTING THE INFORMATION, PLEASE TRY AGAIN LATER",
    ERR_NOT_FOUND: "THE REQUESTED RESOURCE WAS NOT FOUND",
    ERR_UNAUTHORIZED: "YOU ARE NOT AUTHORIZED TO ACCESS THIS RESOURCE",
    ERR_FORBIDDEN: "ACCESS TO THIS RESOURCE IS FORBIDDEN",
    ERR_INTERNAL_SERVER: "AN INTERNAL SERVER ERROR OCCURRED, PLEASE TRY AGAIN LATER",
    ERR_BAD_REQUEST: "THE REQUEST WAS INVALID OR CANNOT BE SERVED",
    ERR_TIMEOUT: "THE REQUEST TIMED OUT, PLEASE TRY AGAIN",
    ERR_CONFLICT: "THERE WAS A CONFLICT WITH THE REQUEST",
    ERR_TOO_MANY_REQUESTS: "TOO MANY REQUESTS, PLEASE SLOW DOWN",
    ERR_UNSUPPORTED_MEDIA_TYPE: "THE MEDIA TYPE OF THE REQUEST IS NOT SUPPORTED",
    ERR_SERVICE_UNAVAILABLE: "THE SERVICE IS TEMPORARILY UNAVAILABLE",
    ERR_PAYLOAD_TOO_LARGE: "THE REQUEST PAYLOAD IS TOO LARGE",
    ERR_METHOD_NOT_ALLOWED: "THE REQUEST METHOD IS NOT ALLOWED",
    ERR_PRECONDITION_FAILED: "PRECONDITION FAILED FOR THE REQUEST",
    ERR_UNPROCESSABLE_ENTITY: "THE REQUEST WAS WELL-FORMED BUT UNABLE TO BE FOLLOWED DUE TO SEMANTIC ERRORS"
}

export const getValidationError = (errorCode: keyof typeof codeMatcher) => {
    return codeMatcher[errorCode] || "UNKNOWN ERROR";
}